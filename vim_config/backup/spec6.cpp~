/*
 * Copyright: Unpublished work. (c) Siemens 2021  All rights reserved.
 */


//#include "spec6.h"
#include "Hector.h"
#include <stdint.h>
//#include "spec5.h"

/**
 * Minmax combinational design.
 *
 * Computes, in zero cycles, the min and max of four eight bit unsigned values.
 */
// extern void update(bool rst, bool x0_in, bool x1_in, bool x2_in, bool x3_in, bool &xmin_out, bool &xmax_out);
int spec6(bool rst, bool x0_in, bool x1_in, bool x2_in, bool x3_in, bool &xmin_out, bool &xmax_out){

    bool x01_min, x23_min;
    bool x01_max, x23_max;

    if (rst) {
        xmin_out=0;
        xmax_out=0;
    } else {
        // Min Calculation
        if (x0_in < x1_in) {
            x01_min = x0_in;
        } else {
            x01_min = x1_in;
        }
        if (x2_in < x3_in) {
            x23_min = x2_in;
        } else {
            x23_min = x3_in;
        }
        if (x01_min < x23_min) {
            xmin_out=x01_min;
        } else {
            xmin_out=x23_min;
        }

        // Max Calculation
        if (x0_in > x1_in) {
            x01_max = x0_in;
        } else {
            x01_max = x1_in;
        }
        if (x2_in > x3_in) {
            x23_max = x2_in;
        } else {
            x23_max = x3_in;
        }
        if (x01_max > x23_max) {
            xmax_out=x01_max;
        } else {
            xmax_out=x23_max;
        }

    }
return 0;
}

int DPV_wrapper () {
   bool rst;
   bool x0_in;
   bool x1_in;
   bool x2_in;
   bool x3_in;
   bool x_out;

    Hector::registerInput ("rst",rst);
    Hector::registerInput ("x0_in",x0_in);
    Hector::registerInput ("x1_in",x1_in);
    Hector::registerInput ("x2_in",x2_in);
    Hector::registerInput ("x3_in",x3_in);
    Hector::registerOutput ("xmax_out",xmax_out);
    Hector::registerOutput ("xmin_out",xmin_out);

    Hector::beginCapture();
        xmax_out = 0;
        xmin_out = 0;
        //spec6(rst,x0_in ,x1_in ,x2_in ,x3_in,xmin_out,xmax_out);
        spec6(rst,x0_in,x1_in,x2_in,x3_in,xmin_out,xmax_out);
    Hector::endCapture();
}
// end of file
