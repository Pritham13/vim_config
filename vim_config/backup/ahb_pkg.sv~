// ###############################################################################
// Copyright (c)  Verikwest Systems Inc -- All Rights Reserved
//
//  NOTICE:  All information contained herein is, and remains the property of
//  Verikwest Systems Inc or its licensors and is subject to license terms.
//  The intellectual and technical concepts contained
//  herein are proprietary to Verikwest Systems Inc. and may be covered by U.S.
//  and Foreign Patents, patents in process, and are protected by trade secret
//  or copyright law.  Dissemination of this information or reproduction of this
//  material is strictly forbidden unless prior written permission is obtained
//  from Verikwest Systems Inc.
// ##############################################################################
package ahb_pkg;
    parameter AHB_DATA_WIDTH = 32 ;
    parameter AHB_ADDR_WIDTH = 32 ;

    // enums for initiator reponse state machine
    typedef enum logic [2:0] {
        M_WAIT_ST,
        M_PUSH_ST,
        M_ERROR_1_ST,
        M_ERROR_2_ST,
        M_INVALID_ST
    } initiator_resp_states_e;

    // enums for initiator request state machine
    typedef enum logic [2:0] {
        M_RQ_WAIT_ST,
        M_PULL_REQ_ST,
        M_DRIVE_CTRL_ST,
        M_DRIVE_DATA_ST,
        M_WAIT_FOR_ACK_ST
    } initiator_request_states_e;

    // enum for target reponse states
    typedef enum logic [2:0] {
        T_START_ST,
        T_TRANSACTION_BEGIN_ST,
        T_PULL_REQ_ST,
        T_PULL_DATA_ST,
        T_OKAY_ST,
        T_ERROR_1_ST,
        T_ERROR_2_ST
    } resp_states_e;

    // enum for target request states
    typedef enum logic [1:0] {
        T_WAIT_ST,  // wait or reset state waits for valid signal
        T_DATA_SAMPLE_ST,  // samples data from the initiator
        T_FIFO_PUSH_ST,  // pushes data into the FIFO
        T_WAIT_FOR_ACK_ST
    } target_req_states_e;

    // declaring enumns for READ/WRITE
    typedef enum logic {
        AHB_READ  = 0,
        AHB_WRITE = 1
        } ahb_read_write_e;

        // declaring enumns for RESPONSE types
        typedef enum logic [1:0] {
            AHB_OKAY  = 2'b00,
            AHB_ERROR = 2'b01,
            AHB_RETRY = 2'b10,
            AHB_SPLIT = 2'b11
        } ahb_hresp_e;

        // declaring enumns for HRESPONSE types
        typedef enum logic [2:0] {
            AHB_SINGLE = 3'b000,
            AHB_INCR   = 3'b001,
            AHB_WRAP4  = 3'b010,
            AHB_INCR4  = 3'b011,
            AHB_WRAP8  = 3'b100,
            AHB_INCR8  = 3'b101,
            AHB_WRAP16 = 3'b110,
            AHB_INCR16 = 3'b111
        } ahb_hburst_e;

        // declaring enums for diff hsize options
        typedef enum logic [2:0] {
            AHB_BYTE           = 3'b000,
            AHB_HALF_WORD      = 3'b001,
            AHB_WORD           = 3'b010,
            AHB_DOUBLE_WORD    = 3'b011,
            AHB_FOUR_WORD      = 3'b100,
            AHB_EIGHT_WORD     = 3'b101,
            AHB_SIXTEEN_WORD   = 3'b110,
            AHB_THIRTYTWO_WORD = 3'b111
        } ahb_hsize_e;

        // enum for transfer types
        typedef enum logic [1:0] {
            AHB_IDLE,
            AHB_NONSEQ,
            AHB_SEQ,
            AHB_BUSY
        } ahb_transfer_types_e;

        // struct for the Reqeust FIFO
        typedef struct packed {
            logic [31:0] haddr;
            ahb_hburst_e hburst;
            logic [3:0] hprot;
            ahb_hsize_e hsize;
            ahb_transfer_types_e htrans;
            logic [31:0] hwdata;
        ahb_read_write_e hwrite;
    } req_data_s;

    // struct for the response fifo
    typedef struct packed {
        logic [31:0] hrdata;
        ahb_hresp_e  hresp;
    } resp_data_s;

endpackage
